{"version":3,"file":"static/js/236.0d4b09f7.chunk.js","mappings":"qSAUMA,EAASC,EAAAA,GAAW,CACtBC,KAAMD,EAAAA,KAAaE,IAAI,GAAGC,WAC1BC,MAAOJ,EAAAA,KAAaE,IAAI,GAAGE,QAAQD,WACnCE,SAAUL,EAAAA,KAAaE,IAAI,GAAGC,aAC/BA,WA2DH,EAzDqB,WACnB,IAAMG,GAAWC,EAAAA,EAAAA,MAEjB,GAA0CC,EAAAA,EAAAA,IAAQ,CAC3CC,UAAUC,EAAAA,EAAAA,GAAYX,KADrBY,EAAQ,EAARA,SAAUC,EAAY,EAAZA,aAAcC,EAAK,EAALA,MAehC,OACE,UAACC,EAAA,EAAG,CACFC,UAAU,OACVC,SAAUJ,GAdG,SAAH,GAAiC,IAA5BX,EAAI,EAAJA,KAAMI,EAAQ,EAARA,SAAUD,EAAK,EAALA,MACjCE,GACEW,EAAAA,EAAAA,IAAa,CACXhB,KAAAA,EACAG,MAAAA,EACAC,SAAAA,KAGJQ,GACF,IAMIK,GAAIC,EAAAA,GACJC,EAAG,EACHC,GAAI,EACJC,GAAG,OAAM,WAGP,SAACC,EAAA,GAAS,gBACRC,KAAK,QAAWb,EAAS,SAAO,IAChCc,GAAG,WACHC,MAAM,WACNR,GAAIS,EAAAA,OAEN,SAACJ,EAAA,GAAS,gBACRC,KAAK,SAAYb,EAAS,UAAQ,IAClCc,GAAG,QACHC,MAAM,QACNR,GAAIS,EAAAA,OAEN,SAACJ,EAAA,GAAS,gBACRC,KAAK,YAAeb,EAAS,aAAW,IACxCc,GAAG,WACHC,MAAM,WACNR,GAAIS,EAAAA,OAER,SAACC,EAAA,EAAM,CACLJ,KAAK,SACLK,QAAQ,YACRX,GAAIY,EAAAA,GAAO,SACZ,eAKP,E,UCvDA,EAbiB,WACf,OACE,SAACC,EAAA,EAAS,CACRb,GAAI,CACFc,GAAI,EACJC,GAAI,SACJ,UAEF,SAAC,EAAY,KAGnB,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { registerUser } from 'redux/auth/operations';\nimport { useForm } from 'react-hook-form';\nimport { TextField, Box, Button } from '@mui/material';\nimport { formStyle, inputStyle, button } from 'utils/styles';\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\n\n// toast.warning(\"The fields were filled in incorrectly.Example name: Adrian Cross  email: across@mail.com password: examplepwd12345\");\n\nconst schema = yup.object({\n    name: yup.string().min(7).required(),\n    email: yup.string().min(7).email().required(),\n    password: yup.string().min(7).required(),\n}).required();\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const { register, handleSubmit, reset } = useForm({\n         resolver: yupResolver(schema),\n  });\n  \n  const onSubmit = ({name, password, email}) => {\n    dispatch(\n      registerUser({\n        name,\n        email,\n        password,\n      })\n    );\n    reset();\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      onSubmit={handleSubmit(onSubmit)}\n      sx={formStyle}\n      p={4}\n      mb={5}\n      mx=\"auto\"\n    >\n      \n        <TextField\n          type=\"text\" {...register('name')}\n          id=\"Username\"\n          label=\"Username\"\n          sx={inputStyle}\n        />\n        <TextField\n          type=\"email\" {...register('email')}\n          id=\"email\"\n          label=\"email\"\n          sx={inputStyle}\n        />\n        <TextField\n          type=\"password\" {...register('password')}\n          id=\"password\"\n          label=\"password\"\n          sx={inputStyle}\n        />\n      <Button\n        type=\"submit\"\n        variant=\"contained\"\n        sx={button}\n      >\n        Register\n      </Button>\n    </Box>\n  );\n};\n\nexport default RegisterForm;\n\n","import RegisterForm from \"components/RegisterForm/RegisterForm\";\nimport { Container } from \"@mui/material\";\n\nconst Register = () => {\n  return (\n    <Container\n      sx={{\n        pt: 5,\n        mt: \"200px\",\n      }}\n    >\n      <RegisterForm />\n    </Container>\n  );\n}\n\nexport default Register;"],"names":["schema","yup","name","min","required","email","password","dispatch","useDispatch","useForm","resolver","yupResolver","register","handleSubmit","reset","Box","component","onSubmit","registerUser","sx","formStyle","p","mb","mx","TextField","type","id","label","inputStyle","Button","variant","button","Container","pt","mt"],"sourceRoot":""}